{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["\nimport Schema, {\n    array as $array,\n    boolean as $boolean,\n    number as $number,\n    object as $object,\n    string as $string,\n    unknown as $unknown\n  } from \"computed-types\";\n  \n  import { Options, Resolvers } from \"./types\";\n  \n  const Query = Schema({\n    query: $object.optional(),\n    update: $object.optional(),\n    $: $object.optional({}),\n  }).destruct();\n  \n  class Sql {\n    resolvers: Resolvers;\n    types: any;\n    options: Options;\n    constructor(resolvers: Resolvers, types: any, options?: Options) {\n      this.resolvers = resolvers;\n      this.types = types;\n      this.options = options ?? {};\n    }\n  \n    \n  \n    private evalArgs(args: any, vars: any) {\n      const self = this;\n      const vReg = /\\$([_a-zA-Z][_a-zA-Z0-9]{0,30})/g;\n      if (typeof args == \"string\") {\n        let test = vReg.exec(args);\n        if (test) {\n          args = args == test[0]\n            ? vars[test[1]]\n            : args.replace(test[0], vars[test[1]]);\n        }\n      } else if (typeof args == \"object\" && \"length\" in args) { //# array\n        args = args.map((arg: any) => self.evalArgs(arg, vars));\n      } else if (typeof args == \"object\" && !(\"length\" in args)) { //# object\n        Object.keys(args).forEach((arg) => {\n          args[arg] = self.evalArgs(args[arg], vars);\n        });\n      }\n      return args;\n    }\n  \n    private async processQuery(q: any, ctx: any) {\n      return new Promise(async (res, rej) => {\n        const self = this;\n        let query = q.query,\n          vars = q.$,\n          current = \"query\",\n          result : any = {};\n        if (!(typeof query == \"object\" && !(\"length\" in query))) { rej({ error: true, at: current, message: \"query should be an object\", }); }\n        if (!Object.keys(query).length)rej({ error : true, at : current, message : `query can't be empty` })\n        for (let element in query) {\n          current = element;\n          if (!(element in self.types)) { rej({ error: true, at: current, message: `${element} is not defined in types`, }); }\n          if (!(element in (self.resolvers.query as any))) { rej({ error: true, at: current, message: `${element} is not defined in types`, }); }\n  \n          try{\n            let elChecker = Schema(self.types[element], {strict : true}).destruct()\n            let elArgs = self.evalArgs(query[element], vars)\n            let elResult = await (self.resolvers.query as any)[element](elArgs, ctx)\n            //-@ts-expect-error\n            let [err, success] = elChecker(elResult);\n            if(err)rej({ error : true, at : current, message : err })\n            result[element] = elResult\n          }catch(err){\n            rej({\n              error : true,\n              at : current,\n              message : err\n            })\n            \n          }\n        }\n        res(result)\n      });\n    }\n\n    private async processUpdate(q: any, ctx: any){\n      return new Promise(async (res, rej) => {\n        const self = this;\n        let query = q.update,\n          vars = q.$,\n          current = \"update\",\n          result : any = {};\n        if (!(typeof query == \"object\" && !(\"length\" in query))) { rej({ error: true, at: current, message: \"update should be an object\", }); }\n        if (!Object.keys(query).length)rej({ error : true, at : current, message : `update can't be empty` })\n        for (let element in query) {\n          current = element;\n          if (!(element in (self.resolvers.update as any))) { rej({ error: true, at: current, message: `${element} is not defined in types`, }); }\n  \n          try{\n            \n            let elArgs = self.evalArgs(query[element], vars)\n            let elResult = await (self.resolvers.update as any)[element](elArgs, ctx)\n            result[element] = elResult\n          }catch(err){\n            rej({\n              error : true,\n              at : current,\n              message : err\n            })\n            \n          }\n        }\n        res(result)\n      });\n  \n    }\n  \n    async process(query: any, context: any) {\n      return new Promise(async (res, rej) => {\n        let [err, q] = Query(query);\n        let result: { data?: any; result?: any } = {};\n        let current = \"root\";\n        if (err) {\n          rej({ error: true, at: current, message: err });\n        }\n        if (!(q?.query) && !(q?.update)) {\n          rej({\n            error: true,\n            at: current,\n            message: `query should contain at least one query or update`,\n          });\n        }\n  \n        if (q?.query) {\n          result[\"data\"] = await this.processQuery(\n            { query: q.query, $: q.$ },\n            context,\n          ).catch((err) => rej(err));\n        }\n  \n  \n        if(q?.update){\n          result[\"result\"] = await this.processUpdate ({\n            update : q.update,\n            $ : q.$\n          }, context).catch(err=>rej(err))\n        }\n  \n  \n        res(result);\n      });\n    }\n  }\n  \n  const string = $string.optional(),\n    number = $number.optional(),\n    boolean = $boolean.optional(),\n    array = $array.optional(),\n    object = $object.optional(),\n    unknown = $unknown.optional()\n  \n  \n  \n  \n  \n  export{\n    Sql as default,\n    string,\n    number,\n    boolean,\n    array,\n    object,\n    unknown,\n    $unknown,\n    $array,\n    $string,\n    $object,\n    $number,\n    $boolean,\n    Schema\n  }\n  \n  export type { Resolvers }"]}